//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;
using FPSdemo;


namespace Assembly_CSharp.Generated
{
    public struct FPSdemoUserCommandSerializer : ICommandDataSerializer<FPSdemo.UserCommand>
    {
        public void Serialize(ref DataStreamWriter writer, in FPSdemo.UserCommand data)
        {
            writer.WriteFloat(data.Movement.x);
            writer.WriteFloat(data.Movement.y);
            writer.WriteFloat(data.Looking.x);
            writer.WriteFloat(data.Looking.y);
            writer.WriteUInt(data.buttons.flags);
        }

        public void Deserialize(ref DataStreamReader reader, ref FPSdemo.UserCommand data)
        {
            data.Movement.x = reader.ReadFloat();
            data.Movement.y = reader.ReadFloat();
            data.Looking.x = reader.ReadFloat();
            data.Looking.y = reader.ReadFloat();
            data.buttons.flags = (uint) reader.ReadUInt();
        }

        public void Serialize(ref DataStreamWriter writer, in FPSdemo.UserCommand data, in FPSdemo.UserCommand baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedFloatDelta(data.Movement.x, baseline.Movement.x, compressionModel);
            writer.WritePackedFloatDelta(data.Movement.y, baseline.Movement.y, compressionModel);
            writer.WritePackedFloatDelta(data.Looking.x, baseline.Looking.x, compressionModel);
            writer.WritePackedFloatDelta(data.Looking.y, baseline.Looking.y, compressionModel);
            writer.WritePackedUIntDelta(data.buttons.flags, baseline.buttons.flags, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref FPSdemo.UserCommand data, in FPSdemo.UserCommand baseline, NetworkCompressionModel compressionModel)
        {
            data.Movement.x = reader.ReadPackedFloatDelta(baseline.Movement.x, compressionModel);
            data.Movement.y = reader.ReadPackedFloatDelta(baseline.Movement.y, compressionModel);
            data.Looking.x = reader.ReadPackedFloatDelta(baseline.Looking.x, compressionModel);
            data.Looking.y = reader.ReadPackedFloatDelta(baseline.Looking.y, compressionModel);
            data.buttons.flags = (uint) reader.ReadPackedUIntDelta(baseline.buttons.flags, compressionModel);
        }
    }
    public class FPSdemoUserCommandSendCommandSystem : CommandSendSystem<FPSdemoUserCommandSerializer, FPSdemo.UserCommand>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class FPSdemoUserCommandReceiveCommandSystem : CommandReceiveSystem<FPSdemoUserCommandSerializer, FPSdemo.UserCommand>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
